CODE := CODEPART | CODE CODEPART
CODEPART := FUNC_DEF | FUNC_STMT | VAR_DEF | VAR_STMT | ARRAY_DEF

FUNC_DEF := <type> FUNC_IDENTIFIER (PARAMETERS_N) BLOCK
FUNC_STMT := <type> FUNC_IDENTIFIER (PARAMETERS_N) ;
VAR_DEF := <type> VAR_IDENTIFIER = EXPR ;
VAR_STMT := <type> VAR_IDENTIFIERS ; | <type> VAR_IDENTIFIER_A ;
ARRAY_DEF := <type> VAR_IDENTIFIER_A = { COMMA_EXP } ;

VAR_IDENTIFIERS := VAR_IDENTIFIER | VAR_IDENTIFIERS , VAR_IDENTIFIER
FUNC_IDENTIFIER := <identifier>
VAR_IDENTIFIER := <identifier>
VAR_IDENTIFIER_A := <identifier> | VAR_IDENTIFIER_A [ <number> ]

PARAMETERS_N := PARAMETERS | <none>
PARAMETERS := PARAMETER | PARAMETERS, PARAMETER
PARAMETER := <type> <identifier> | <type> ( PARAMETER_IDF )
PARAMETER_IDF := <identifier> | PARAMETER_IDF [ <number> ]

BLOCK := {SENTENCES_N}
S_OR_B := SENTENCE | BLOCK
SENTENCES_N := SENTENCES | <none>
SENTENCES := SENTENCE | SENTENCES SENTENCE
SENTENCE := EXPR ; | ASSIGN_STC | FOR_STC | WHILE_STC | DO_STC | IF_STC | SWITCH_STC | BREAK_STC | CONTINUE_STC | VAR_STMT | VAR_DEF | ARRAY_DEF | RETURN_STC

FOR_STC := <for>(FOR_EXPRS) BLOCK
FOR_EXPRS := EXPR_AN; EXPR_AN; EXPR_AN
EXPR_AN := ASSIGN_EXP | EXPR | <none>

WHILE_STC := <while> ( EXPR ) BLOCK
DO_STC := <do> S_OR_B <while> ( EXPR )
BREAK_STC := <break>;
CONTINUE_STC := <continue>;

IF_STC := <if> ( EXPR ) S_OR_B ELSE_STC_N
ELSE_STC_N := ELSE_STC | <none>
ELSE_STC := <else> BLOCK

SWITCH_STC := <switch> ( EXPR ) {CS_OR_D}
CS_OR_D := CASES_N | CASES_N DEFAULT_STC
CASES_N := CASES | <none>
CASES := CASE_STC | CASES CASE_STC
CASE_STC := <case> EXPR : S_OR_B
DEFAULT_STC := <default> : S_OR_B

RETURN_STC := <return> EXPR_N;
EXPR_N := EXPR | <none>
ASSIGN_STC := ASSIGN_EXP;
ASSIGN_EXP := <identifier> = EXPR | ( ARRAY_VISIT ) = EXPR 
ARRAY_VISIT := <identifier> | ARRAY_VISIT [ EXPR ] 

EXPR := EXPR_ | EXPR <opr_right> | EXPR <opr_two> EXPR | EXPR <opr_minus> EXPR | <opr_left> EXPR 
EXPR_ :=  <identifier> | <number> |  <sizeof>(TYPE) | <opr_minus> <number> | ( EXPR ) | <identifier> [ EXPR ] | FUNC_CALL 
COMMA_EXP := COMMA_EXP_ELE | COMMA_EXP, COMMA_EXP_ELE
COMMA_EXP_ELE := EXPR_ | ( EXPR )
FUNC_CALL := <identifier> ( COMMA_EXP )
TYPE := <type>